
Creating new shared memory segment
Created new semaphore WORKER set with 2 members
 Created new semaphore UPDATE set with 1 members
 Created new semaphore ACCESS set with 1 members
 Created new semaphore COLLISION set with 2 members
 Created new message queue 65538 set with 1 members
 WORKER          id = 1
Worker 1 is working
 WORKER          id = 2
Worker 2 is working
 Initialized


Enter next cycle
Compute next table
Semaphore(sem 0 of set WORKER) + 1 ,value : 1
Semaphore(sem 1 of set WORKER) + 1 ,value : 1
Semaphore(sem 0 of set UPDATE) - 1 ,value : 1
Update 0
Semaphore(sem 0 of set UPDATE) - 1 ,value : 0
Update 1
All workers updated their position
Unlocking collision 1
Semaphore(sem 0 of set COLLISION) + 1 ,value : 0
Unlocking collision 2
Semaphore(sem 1 of set COLLISION) + 1 ,value : 0
All collisions unlocked
Semaphore(sem 0 of set COLLISION) - 1 ,value : 0
Semaphore(sem 1 of set COLLISION) - 1 ,value : 0
Worker 1 Collision semaphore unlocked (a)
Worker 2 Collision semaphore unlocked (a)
allUpdated is : 1
allUpdated is : 1
,Worker 1 Waiting to reactivate
,Worker 2 Waiting to reactivate
Semaphore(sem 0 of set WORKER) - 1 ,value : 0
Semaphore(sem 1 of set WORKER) - 1 ,value : 0
Worker 1 is working
Worker 2 is working
Semaphore(sem 0 of set ACCESS) - 1 ,value : 0
Worker 1 computing position
Semaphore(sem 0 of set ACCESS) + 1 ,value : 0
Worker 1 has released UPDATE
Semaphore(sem 0 of set ACCESS) - 1 ,value : 0
Worker 2 computing position
Semaphore(sem 0 of set UPDATE) + 1 ,value : 1
Semaphore(sem 0 of set ACCESS) + 1 ,value : 1
Worker 1 position updated
Worker 2 has released UPDATE
Semaphore(sem 0 of set UPDATE) + 1 ,value : 2
Worker 2 position updated
Position of square 1 : (20,20)
Position of square 2 : (20,36)
allUpdated put to 0 : 0

Enter next cycle
Compute next table
Semaphore(sem 0 of set WORKER) + 1 ,value : 1
Semaphore(sem 1 of set WORKER) + 1 ,value : 1
Semaphore(sem 0 of set UPDATE) - 1 ,value : 1
Update 0
Semaphore(sem 0 of set UPDATE) - 1 ,value : 0
Update 1
All workers updated their position
Unlocking collision 1
Semaphore(sem 0 of set COLLISION) + 1 ,value : 0
Unlocking collision 2
Semaphore(sem 1 of set COLLISION) + 1 ,value : 0
All collisions unlocked
Semaphore(sem 0 of set COLLISION) - 1 ,value : 0
Semaphore(sem 1 of set COLLISION) - 1 ,value : 0
Worker 1 Collision semaphore unlocked (a)
Worker 2 Collision semaphore unlocked (a)
allUpdated is : 1
allUpdated is : 1
,Worker 1 Waiting to reactivate
,Worker 2 Waiting to reactivate
Semaphore(sem 0 of set WORKER) - 1 ,value : 0
Semaphore(sem 1 of set WORKER) - 1 ,value : 0
Worker 1 is working
Worker 2 is working
Semaphore(sem 0 of set ACCESS) - 1 ,value : 0
Worker 1 computing position
Semaphore(sem 0 of set ACCESS) + 1 ,value : 0
Worker 1 has released UPDATE
Semaphore(sem 0 of set ACCESS) - 1 ,value : 0
Semaphore(sem 0 of set UPDATE) + 1 ,value : 1
Worker 2 computing position
Worker 1 position updated
Worker 2 intersects, is the other one updated? : 0
Worker 2 collided with worker 1
Semaphore(sem 0 of set COLLISION) + 1 ,value : 0
Semaphore(sem 0 of set COLLISION) - 1 ,value : 0
Worker 2 Speed sent
Worker 1 Collision semaphore unlocked (a)
allUpdated is : 1
,Worker 1 Waiting to reactivate
Position of square 1 : (20,20)
Position of square 2 : (20,36)
allUpdated put to 0 : 0

Enter next cycle
Compute next table
Semaphore(sem 0 of set WORKER) + 1 ,value : 0
Semaphore(sem 1 of set WORKER) + 1 ,value : 1
Semaphore(sem 0 of set UPDATE) - 1 ,value : 0
Update 0
Semaphore(sem 0 of set WORKER) - 1 ,value : 0
Worker 1 is working

